//
// LesssonsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class LessonsAPI {

    /**
     getLessons
     
     - parameter lessons: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLessons(lessons: Lessons? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: [LessonsInfo]?, _ error: Error?) -> Void)) {
        getLessonsWithRequestBuilder(lessons: lessons).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
                print("Lessons error = ", error)
            }
        }
    }

    /**
     getLessons
     - POST /json2/
     - parameter lessons: (body)  (optional)
     - returns: RequestBuilder<[LessonsInfo]> 
     */
    open class func getLessonsWithRequestBuilder(lessons: Lessons? = nil) -> RequestBuilder<[LessonsInfo]> {
        let localVariablePath = "/json/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lessons)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LessonsInfo]>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
